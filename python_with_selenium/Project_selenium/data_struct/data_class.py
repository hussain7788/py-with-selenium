#Code generated by WebJson
#File Name: data.py

from __future__ import annotations
from typing import List


class Admin():
    class objects():
        _all_instances: List[Admin] = list()
        @classmethod
        def _add_instance(cls, obj: Admin):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Admin.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Admin]:
            return self._instances

        def __init__(self, instances: List[Admin]):
            self._instances = instances

        def filter(self, **kwargs) -> Admin.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Admin.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, first_name: str, last_name: str, company_name: str, company_url: str, email: str, password: str, signin_link: str):
        self.first_name = first_name
        self.last_name = last_name
        self.company_name = company_name
        self.company_url = company_url
        self.email = email
        self.password = password
        self.signin_link = signin_link
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Admin):
            is_equal = True
            if self.first_name != other.first_name:
                is_equal = False
            if self.last_name != other.last_name:
                is_equal = False
            if self.company_name != other.company_name:
                is_equal = False
            if self.company_url != other.company_url:
                is_equal = False
            if self.email != other.email:
                is_equal = False
            if self.password != other.password:
                is_equal = False
            if self.signin_link != other.signin_link:
                is_equal = False
            return is_equal
        return False

class Employee():
    class objects():
        _all_instances: List[Employee] = list()
        @classmethod
        def _add_instance(cls, obj: Employee):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Employee.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Employee]:
            return self._instances

        def __init__(self, instances: List[Employee]):
            self._instances = instances

        def filter(self, **kwargs) -> Employee.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Employee.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, first_name: str, last_name: str, email: str, emp_type: str, emp_type_enum: int, emp_mgr: str, password: str):
        self.admin_obj = admin_obj
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.emp_type = emp_type
        self.emp_type_enum = emp_type_enum
        self.emp_mgr = emp_mgr
        self.password = password
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Employee):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.first_name != other.first_name:
                is_equal = False
            if self.last_name != other.last_name:
                is_equal = False
            if self.email != other.email:
                is_equal = False
            if self.emp_type != other.emp_type:
                is_equal = False
            if self.emp_type_enum != other.emp_type_enum:
                is_equal = False
            if self.emp_mgr != other.emp_mgr:
                is_equal = False
            if self.password != other.password:
                is_equal = False
            return is_equal
        return False

class Client():
    class objects():
        _all_instances: List[Client] = list()
        @classmethod
        def _add_instance(cls, obj: Client):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Client.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Client]:
            return self._instances

        def __init__(self, instances: List[Client]):
            self._instances = instances

        def filter(self, **kwargs) -> Client.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Client.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, first_name: str, last_name: str, full_name: str, email: str, phone_num: str, ref_channel: str, password: str):
        self.admin_obj = admin_obj
        self.first_name = first_name
        self.last_name = last_name
        self.full_name = full_name
        self.email = email
        self.phone_num = phone_num
        self.ref_channel = ref_channel
        self.password = password
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Client):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.first_name != other.first_name:
                is_equal = False
            if self.last_name != other.last_name:
                is_equal = False
            if self.full_name != other.full_name:
                is_equal = False
            if self.email != other.email:
                is_equal = False
            if self.phone_num != other.phone_num:
                is_equal = False
            if self.ref_channel != other.ref_channel:
                is_equal = False
            if self.password != other.password:
                is_equal = False
            return is_equal
        return False

class Business():
    class objects():
        _all_instances: List[Business] = list()
        @classmethod
        def _add_instance(cls, obj: Business):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Business.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Business]:
            return self._instances

        def __init__(self, instances: List[Business]):
            self._instances = instances

        def filter(self, **kwargs) -> Business.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Business.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, client_obj: Client, bns_name: str, bns_type: str, bns_inc_state: str, bns_inc_date: str, bk_frequency: str, bk_month: str, bk_day: str, bk_emp: str, pr_frequency: str, pr_month: str, pr_day: str, pr_emp: str, st_frequency: str, st_month: str, st_day: str, st_emp: str, tp_frequency: str, tp_month: str, tp_day: str, tp_emp: str, bns_bk: str, bns_pr: str, bns_st: str, bns_tp: str):
        self.client_obj = client_obj
        self.bns_name = bns_name
        self.bns_type = bns_type
        self.bns_inc_state = bns_inc_state
        self.bns_inc_date = bns_inc_date
        self.bk_frequency = bk_frequency
        self.bk_month = bk_month
        self.bk_day = bk_day
        self.bk_emp = bk_emp
        self.pr_frequency = pr_frequency
        self.pr_month = pr_month
        self.pr_day = pr_day
        self.pr_emp = pr_emp
        self.st_frequency = st_frequency
        self.st_month = st_month
        self.st_day = st_day
        self.st_emp = st_emp
        self.tp_frequency = tp_frequency
        self.tp_month = tp_month
        self.tp_day = tp_day
        self.tp_emp = tp_emp
        self.bns_bk = bns_bk
        self.bns_pr = bns_pr
        self.bns_st = bns_st
        self.bns_tp = bns_tp
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Business):
            is_equal = True
            if self.client_obj != other.client_obj:
                is_equal = False
            if self.bns_name != other.bns_name:
                is_equal = False
            if self.bns_type != other.bns_type:
                is_equal = False
            if self.bns_inc_state != other.bns_inc_state:
                is_equal = False
            if self.bns_inc_date != other.bns_inc_date:
                is_equal = False
            if self.bk_frequency != other.bk_frequency:
                is_equal = False
            if self.bk_month != other.bk_month:
                is_equal = False
            if self.bk_day != other.bk_day:
                is_equal = False
            if self.bk_emp != other.bk_emp:
                is_equal = False
            if self.pr_frequency != other.pr_frequency:
                is_equal = False
            if self.pr_month != other.pr_month:
                is_equal = False
            if self.pr_day != other.pr_day:
                is_equal = False
            if self.pr_emp != other.pr_emp:
                is_equal = False
            if self.st_frequency != other.st_frequency:
                is_equal = False
            if self.st_month != other.st_month:
                is_equal = False
            if self.st_day != other.st_day:
                is_equal = False
            if self.st_emp != other.st_emp:
                is_equal = False
            if self.tp_frequency != other.tp_frequency:
                is_equal = False
            if self.tp_month != other.tp_month:
                is_equal = False
            if self.tp_day != other.tp_day:
                is_equal = False
            if self.tp_emp != other.tp_emp:
                is_equal = False
            if self.bns_bk != other.bns_bk:
                is_equal = False
            if self.bns_pr != other.bns_pr:
                is_equal = False
            if self.bns_st != other.bns_st:
                is_equal = False
            if self.bns_tp != other.bns_tp:
                is_equal = False
            return is_equal
        return False

class Client_Msgs():
    class objects():
        _all_instances: List[Client_Msgs] = list()
        @classmethod
        def _add_instance(cls, obj: Client_Msgs):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Client_Msgs.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Client_Msgs]:
            return self._instances

        def __init__(self, instances: List[Client_Msgs]):
            self._instances = instances

        def filter(self, **kwargs) -> Client_Msgs.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Client_Msgs.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, client_obj: Client, client_message_text: str, full_name: str):
        self.client_obj = client_obj
        self.client_message_text = client_message_text
        self.full_name = full_name
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Client_Msgs):
            is_equal = True
            if self.client_obj != other.client_obj:
                is_equal = False
            if self.client_message_text != other.client_message_text:
                is_equal = False
            if self.full_name != other.full_name:
                is_equal = False
            return is_equal
        return False

class Team_Msgs():
    class objects():
        _all_instances: List[Team_Msgs] = list()
        @classmethod
        def _add_instance(cls, obj: Team_Msgs):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Team_Msgs.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Team_Msgs]:
            return self._instances

        def __init__(self, instances: List[Team_Msgs]):
            self._instances = instances

        def filter(self, **kwargs) -> Team_Msgs.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Team_Msgs.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, client_obj: Client, team_message_text: str):
        self.client_obj = client_obj
        self.team_message_text = team_message_text
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Team_Msgs):
            is_equal = True
            if self.client_obj != other.client_obj:
                is_equal = False
            if self.team_message_text != other.team_message_text:
                is_equal = False
            return is_equal
        return False

class Client_Doc():
    class objects():
        _all_instances: List[Client_Doc] = list()
        @classmethod
        def _add_instance(cls, obj: Client_Doc):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Client_Doc.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Client_Doc]:
            return self._instances

        def __init__(self, instances: List[Client_Doc]):
            self._instances = instances

        def filter(self, **kwargs) -> Client_Doc.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Client_Doc.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, client_obj: Client, tab_name: str, sub_tab_name: str, business_name: str, tax_year: str, document_source: str, file_type: str, file_path: str, file_name: str, owner: str):
        self.client_obj = client_obj
        self.tab_name = tab_name
        self.sub_tab_name = sub_tab_name
        self.business_name = business_name
        self.tax_year = tax_year
        self.document_source = document_source
        self.file_type = file_type
        self.file_path = file_path
        self.file_name = file_name
        self.owner = owner
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Client_Doc):
            is_equal = True
            if self.client_obj != other.client_obj:
                is_equal = False
            if self.tab_name != other.tab_name:
                is_equal = False
            if self.sub_tab_name != other.sub_tab_name:
                is_equal = False
            if self.business_name != other.business_name:
                is_equal = False
            if self.tax_year != other.tax_year:
                is_equal = False
            if self.document_source != other.document_source:
                is_equal = False
            if self.file_type != other.file_type:
                is_equal = False
            if self.file_path != other.file_path:
                is_equal = False
            if self.file_name != other.file_name:
                is_equal = False
            if self.owner != other.owner:
                is_equal = False
            return is_equal
        return False

class Client_Todo_Task():
    class objects():
        _all_instances: List[Client_Todo_Task] = list()
        @classmethod
        def _add_instance(cls, obj: Client_Todo_Task):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Client_Todo_Task.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Client_Todo_Task]:
            return self._instances

        def __init__(self, instances: List[Client_Todo_Task]):
            self._instances = instances

        def filter(self, **kwargs) -> Client_Todo_Task.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Client_Todo_Task.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, client_obj: Client, todo_due_date: str, todo_task: str):
        self.client_obj = client_obj
        self.todo_due_date = todo_due_date
        self.todo_task = todo_task
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Client_Todo_Task):
            is_equal = True
            if self.client_obj != other.client_obj:
                is_equal = False
            if self.todo_due_date != other.todo_due_date:
                is_equal = False
            if self.todo_task != other.todo_task:
                is_equal = False
            return is_equal
        return False

class Client_notes():
    class objects():
        _all_instances: List[Client_notes] = list()
        @classmethod
        def _add_instance(cls, obj: Client_notes):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Client_notes.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Client_notes]:
            return self._instances

        def __init__(self, instances: List[Client_notes]):
            self._instances = instances

        def filter(self, **kwargs) -> Client_notes.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Client_notes.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, client_obj: Client, client_note: str):
        self.client_obj = client_obj
        self.client_note = client_note
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Client_notes):
            is_equal = True
            if self.client_obj != other.client_obj:
                is_equal = False
            if self.client_note != other.client_note:
                is_equal = False
            return is_equal
        return False

class Client_Status():
    class objects():
        _all_instances: List[Client_Status] = list()
        @classmethod
        def _add_instance(cls, obj: Client_Status):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Client_Status.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Client_Status]:
            return self._instances

        def __init__(self, instances: List[Client_Status]):
            self._instances = instances

        def filter(self, **kwargs) -> Client_Status.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Client_Status.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, client_obj: Client, tab_name: str, year: int, business_name: str, mgr_name: str, emp_name: str, status_name: str, engagement_name: str, uploaded: str):
        self.client_obj = client_obj
        self.tab_name = tab_name
        self.year = year
        self.business_name = business_name
        self.mgr_name = mgr_name
        self.emp_name = emp_name
        self.status_name = status_name
        self.engagement_name = engagement_name
        self.uploaded = uploaded
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Client_Status):
            is_equal = True
            if self.client_obj != other.client_obj:
                is_equal = False
            if self.tab_name != other.tab_name:
                is_equal = False
            if self.year != other.year:
                is_equal = False
            if self.business_name != other.business_name:
                is_equal = False
            if self.mgr_name != other.mgr_name:
                is_equal = False
            if self.emp_name != other.emp_name:
                is_equal = False
            if self.status_name != other.status_name:
                is_equal = False
            if self.engagement_name != other.engagement_name:
                is_equal = False
            if self.uploaded != other.uploaded:
                is_equal = False
            return is_equal
        return False

class Client_Invoices():
    class objects():
        _all_instances: List[Client_Invoices] = list()
        @classmethod
        def _add_instance(cls, obj: Client_Invoices):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Client_Invoices.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Client_Invoices]:
            return self._instances

        def __init__(self, instances: List[Client_Invoices]):
            self._instances = instances

        def filter(self, **kwargs) -> Client_Invoices.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Client_Invoices.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, client_obj: Client, invoice_date: str, due_date: int, description: str, quantity: int, price: int, sales_tax: int, notes: str, payment_memo: str, t_invoice_amount: int):
        self.client_obj = client_obj
        self.invoice_date = invoice_date
        self.due_date = due_date
        self.description = description
        self.quantity = quantity
        self.price = price
        self.sales_tax = sales_tax
        self.notes = notes
        self.payment_memo = payment_memo
        self.t_invoice_amount = t_invoice_amount
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Client_Invoices):
            is_equal = True
            if self.client_obj != other.client_obj:
                is_equal = False
            if self.invoice_date != other.invoice_date:
                is_equal = False
            if self.due_date != other.due_date:
                is_equal = False
            if self.description != other.description:
                is_equal = False
            if self.quantity != other.quantity:
                is_equal = False
            if self.price != other.price:
                is_equal = False
            if self.sales_tax != other.sales_tax:
                is_equal = False
            if self.notes != other.notes:
                is_equal = False
            if self.payment_memo != other.payment_memo:
                is_equal = False
            if self.t_invoice_amount != other.t_invoice_amount:
                is_equal = False
            return is_equal
        return False

class Admin_Settings():
    class objects():
        _all_instances: List[Admin_Settings] = list()
        @classmethod
        def _add_instance(cls, obj: Admin_Settings):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Admin_Settings.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Admin_Settings]:
            return self._instances

        def __init__(self, instances: List[Admin_Settings]):
            self._instances = instances

        def filter(self, **kwargs) -> Admin_Settings.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Admin_Settings.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, access_settings: str, review_name: str, review_link: str):
        self.admin_obj = admin_obj
        self.access_settings = access_settings
        self.review_name = review_name
        self.review_link = review_link
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Admin_Settings):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.access_settings != other.access_settings:
                is_equal = False
            if self.review_name != other.review_name:
                is_equal = False
            if self.review_link != other.review_link:
                is_equal = False
            return is_equal
        return False

class Admin_Billing():
    class objects():
        _all_instances: List[Admin_Billing] = list()
        @classmethod
        def _add_instance(cls, obj: Admin_Billing):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Admin_Billing.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Admin_Billing]:
            return self._instances

        def __init__(self, instances: List[Admin_Billing]):
            self._instances = instances

        def filter(self, **kwargs) -> Admin_Billing.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Admin_Billing.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, adds_line1: str, adds_line2: str, city: str, state: str, zipcode: int, card_holder_name: str, card_no: str, mm_yy: str, cvc: str):
        self.admin_obj = admin_obj
        self.adds_line1 = adds_line1
        self.adds_line2 = adds_line2
        self.city = city
        self.state = state
        self.zipcode = zipcode
        self.card_holder_name = card_holder_name
        self.card_no = card_no
        self.mm_yy = mm_yy
        self.cvc = cvc
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Admin_Billing):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.adds_line1 != other.adds_line1:
                is_equal = False
            if self.adds_line2 != other.adds_line2:
                is_equal = False
            if self.city != other.city:
                is_equal = False
            if self.state != other.state:
                is_equal = False
            if self.zipcode != other.zipcode:
                is_equal = False
            if self.card_holder_name != other.card_holder_name:
                is_equal = False
            if self.card_no != other.card_no:
                is_equal = False
            if self.mm_yy != other.mm_yy:
                is_equal = False
            if self.cvc != other.cvc:
                is_equal = False
            return is_equal
        return False

class Billing():
    class objects():
        _all_instances: List[Billing] = list()
        @classmethod
        def _add_instance(cls, obj: Billing):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Billing.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Billing]:
            return self._instances

        def __init__(self, instances: List[Billing]):
            self._instances = instances

        def filter(self, **kwargs) -> Billing.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Billing.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, xyz: int, qty: int, amount: int):
        self.admin_obj = admin_obj
        self.xyz = xyz
        self.qty = qty
        self.amount = amount
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Billing):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.xyz != other.xyz:
                is_equal = False
            if self.qty != other.qty:
                is_equal = False
            if self.amount != other.amount:
                is_equal = False
            return is_equal
        return False

class Workflow_Ops():
    class objects():
        _all_instances: List[Workflow_Ops] = list()
        @classmethod
        def _add_instance(cls, obj: Workflow_Ops):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Workflow_Ops.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Workflow_Ops]:
            return self._instances

        def __init__(self, instances: List[Workflow_Ops]):
            self._instances = instances

        def filter(self, **kwargs) -> Workflow_Ops.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Workflow_Ops.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, emp_full_name: str, filter_status: str, filter_year: str, tab_name: str, sub_tab_name: str, action: str, context_email: str):
        self.admin_obj = admin_obj
        self.emp_full_name = emp_full_name
        self.filter_status = filter_status
        self.filter_year = filter_year
        self.tab_name = tab_name
        self.sub_tab_name = sub_tab_name
        self.action = action
        self.context_email = context_email
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Workflow_Ops):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.emp_full_name != other.emp_full_name:
                is_equal = False
            if self.filter_status != other.filter_status:
                is_equal = False
            if self.filter_year != other.filter_year:
                is_equal = False
            if self.tab_name != other.tab_name:
                is_equal = False
            if self.sub_tab_name != other.sub_tab_name:
                is_equal = False
            if self.action != other.action:
                is_equal = False
            if self.context_email != other.context_email:
                is_equal = False
            return is_equal
        return False

class Workflow():
    class objects():
        _all_instances: List[Workflow] = list()
        @classmethod
        def _add_instance(cls, obj: Workflow):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Workflow.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Workflow]:
            return self._instances

        def __init__(self, instances: List[Workflow]):
            self._instances = instances

        def filter(self, **kwargs) -> Workflow.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Workflow.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, workflow_ops_obj: Workflow_Ops, client_full_name: str, year: int, bns_name: str, alert_msg: str):
        self.workflow_ops_obj = workflow_ops_obj
        self.client_full_name = client_full_name
        self.year = year
        self.bns_name = bns_name
        self.alert_msg = alert_msg
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Workflow):
            is_equal = True
            if self.workflow_ops_obj != other.workflow_ops_obj:
                is_equal = False
            if self.client_full_name != other.client_full_name:
                is_equal = False
            if self.year != other.year:
                is_equal = False
            if self.bns_name != other.bns_name:
                is_equal = False
            if self.alert_msg != other.alert_msg:
                is_equal = False
            return is_equal
        return False

class Ticket():
    class objects():
        _all_instances: List[Ticket] = list()
        @classmethod
        def _add_instance(cls, obj: Ticket):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Ticket.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Ticket]:
            return self._instances

        def __init__(self, instances: List[Ticket]):
            self._instances = instances

        def filter(self, **kwargs) -> Ticket.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Ticket.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, id: int, subject: str, msg: str, tfile_path: str, reply: str, rfile_path: str):
        self.admin_obj = admin_obj
        self.id = id
        self.subject = subject
        self.msg = msg
        self.tfile_path = tfile_path
        self.reply = reply
        self.rfile_path = rfile_path
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Ticket):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.id != other.id:
                is_equal = False
            if self.subject != other.subject:
                is_equal = False
            if self.msg != other.msg:
                is_equal = False
            if self.tfile_path != other.tfile_path:
                is_equal = False
            if self.reply != other.reply:
                is_equal = False
            if self.rfile_path != other.rfile_path:
                is_equal = False
            return is_equal
        return False

class Notif_Todo():
    class objects():
        _all_instances: List[Notif_Todo] = list()
        @classmethod
        def _add_instance(cls, obj: Notif_Todo):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Notif_Todo.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Notif_Todo]:
            return self._instances

        def __init__(self, instances: List[Notif_Todo]):
            self._instances = instances

        def filter(self, **kwargs) -> Notif_Todo.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Notif_Todo.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, client_obj: Client, todo_date: str, todo_task: str, clientname: str):
        self.client_obj = client_obj
        self.todo_date = todo_date
        self.todo_task = todo_task
        self.clientname = clientname
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Notif_Todo):
            is_equal = True
            if self.client_obj != other.client_obj:
                is_equal = False
            if self.todo_date != other.todo_date:
                is_equal = False
            if self.todo_task != other.todo_task:
                is_equal = False
            if self.clientname != other.clientname:
                is_equal = False
            return is_equal
        return False

class Admin_Lead():
    class objects():
        _all_instances: List[Admin_Lead] = list()
        @classmethod
        def _add_instance(cls, obj: Admin_Lead):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Admin_Lead.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Admin_Lead]:
            return self._instances

        def __init__(self, instances: List[Admin_Lead]):
            self._instances = instances

        def filter(self, **kwargs) -> Admin_Lead.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Admin_Lead.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, first_name: str, last_name: str, email: str, phone_num: str, comments: str, contact_method: str, ref_channel: str):
        self.admin_obj = admin_obj
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.phone_num = phone_num
        self.comments = comments
        self.contact_method = contact_method
        self.ref_channel = ref_channel
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Admin_Lead):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.first_name != other.first_name:
                is_equal = False
            if self.last_name != other.last_name:
                is_equal = False
            if self.email != other.email:
                is_equal = False
            if self.phone_num != other.phone_num:
                is_equal = False
            if self.comments != other.comments:
                is_equal = False
            if self.contact_method != other.contact_method:
                is_equal = False
            if self.ref_channel != other.ref_channel:
                is_equal = False
            return is_equal
        return False

class practice_insights():
    class objects():
        _all_instances: List[practice_insights] = list()
        @classmethod
        def _add_instance(cls, obj: practice_insights):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> practice_insights.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[practice_insights]:
            return self._instances

        def __init__(self, instances: List[practice_insights]):
            self._instances = instances

        def filter(self, **kwargs) -> practice_insights.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> practice_insights.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, year: int, mgr_name: str, initial: int, admin_review: int, mgr_review: int, total: int, assigned: int, in_progress: int, info_pending: int, client_review: int, efile_auth: int, efiled: int, closed: int):
        self.admin_obj = admin_obj
        self.year = year
        self.mgr_name = mgr_name
        self.initial = initial
        self.admin_review = admin_review
        self.mgr_review = mgr_review
        self.total = total
        self.assigned = assigned
        self.in_progress = in_progress
        self.info_pending = info_pending
        self.client_review = client_review
        self.efile_auth = efile_auth
        self.efiled = efiled
        self.closed = closed
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, practice_insights):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.year != other.year:
                is_equal = False
            if self.mgr_name != other.mgr_name:
                is_equal = False
            if self.initial != other.initial:
                is_equal = False
            if self.admin_review != other.admin_review:
                is_equal = False
            if self.mgr_review != other.mgr_review:
                is_equal = False
            if self.total != other.total:
                is_equal = False
            if self.assigned != other.assigned:
                is_equal = False
            if self.in_progress != other.in_progress:
                is_equal = False
            if self.info_pending != other.info_pending:
                is_equal = False
            if self.client_review != other.client_review:
                is_equal = False
            if self.efile_auth != other.efile_auth:
                is_equal = False
            if self.efiled != other.efiled:
                is_equal = False
            if self.closed != other.closed:
                is_equal = False
            return is_equal
        return False

class client_insights():
    class objects():
        _all_instances: List[client_insights] = list()
        @classmethod
        def _add_instance(cls, obj: client_insights):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> client_insights.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[client_insights]:
            return self._instances

        def __init__(self, instances: List[client_insights]):
            self._instances = instances

        def filter(self, **kwargs) -> client_insights.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> client_insights.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, google: int, yelp: int, twitter: int, facebook: int, instagram: int, linkedin: int, nextdoor: int, client: int, other: int, year: int, lost: int, retained: int, new: int, prospective: int, sole_prop: int, lp: int, llp: int, llc: int, c_corp: int, s_corp: int, non_profit: int, bookkeeping: int, payroll: int, salestax: int, taxplanning: int):
        self.admin_obj = admin_obj
        self.google = google
        self.yelp = yelp
        self.twitter = twitter
        self.facebook = facebook
        self.instagram = instagram
        self.linkedin = linkedin
        self.nextdoor = nextdoor
        self.client = client
        self.other = other
        self.year = year
        self.lost = lost
        self.retained = retained
        self.new = new
        self.prospective = prospective
        self.sole_prop = sole_prop
        self.lp = lp
        self.llp = llp
        self.llc = llc
        self.c_corp = c_corp
        self.s_corp = s_corp
        self.non_profit = non_profit
        self.bookkeeping = bookkeeping
        self.payroll = payroll
        self.salestax = salestax
        self.taxplanning = taxplanning
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, client_insights):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.google != other.google:
                is_equal = False
            if self.yelp != other.yelp:
                is_equal = False
            if self.twitter != other.twitter:
                is_equal = False
            if self.facebook != other.facebook:
                is_equal = False
            if self.instagram != other.instagram:
                is_equal = False
            if self.linkedin != other.linkedin:
                is_equal = False
            if self.nextdoor != other.nextdoor:
                is_equal = False
            if self.client != other.client:
                is_equal = False
            if self.other != other.other:
                is_equal = False
            if self.year != other.year:
                is_equal = False
            if self.lost != other.lost:
                is_equal = False
            if self.retained != other.retained:
                is_equal = False
            if self.new != other.new:
                is_equal = False
            if self.prospective != other.prospective:
                is_equal = False
            if self.sole_prop != other.sole_prop:
                is_equal = False
            if self.lp != other.lp:
                is_equal = False
            if self.llp != other.llp:
                is_equal = False
            if self.llc != other.llc:
                is_equal = False
            if self.c_corp != other.c_corp:
                is_equal = False
            if self.s_corp != other.s_corp:
                is_equal = False
            if self.non_profit != other.non_profit:
                is_equal = False
            if self.bookkeeping != other.bookkeeping:
                is_equal = False
            if self.payroll != other.payroll:
                is_equal = False
            if self.salestax != other.salestax:
                is_equal = False
            if self.taxplanning != other.taxplanning:
                is_equal = False
            return is_equal
        return False

class growth_insights():
    class objects():
        _all_instances: List[growth_insights] = list()
        @classmethod
        def _add_instance(cls, obj: growth_insights):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> growth_insights.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[growth_insights]:
            return self._instances

        def __init__(self, instances: List[growth_insights]):
            self._instances = instances

        def filter(self, **kwargs) -> growth_insights.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> growth_insights.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, year: int, raised_total_amount: int, raised: int, paid_total_amount: int, paid: int, outstanding_total_amount: int, outstanding: int):
        self.admin_obj = admin_obj
        self.year = year
        self.raised_total_amount = raised_total_amount
        self.raised = raised
        self.paid_total_amount = paid_total_amount
        self.paid = paid
        self.outstanding_total_amount = outstanding_total_amount
        self.outstanding = outstanding
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, growth_insights):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.year != other.year:
                is_equal = False
            if self.raised_total_amount != other.raised_total_amount:
                is_equal = False
            if self.raised != other.raised:
                is_equal = False
            if self.paid_total_amount != other.paid_total_amount:
                is_equal = False
            if self.paid != other.paid:
                is_equal = False
            if self.outstanding_total_amount != other.outstanding_total_amount:
                is_equal = False
            if self.outstanding != other.outstanding:
                is_equal = False
            return is_equal
        return False

class Admin_Projects():
    class objects():
        _all_instances: List[Admin_Projects] = list()
        @classmethod
        def _add_instance(cls, obj: Admin_Projects):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Admin_Projects.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Admin_Projects]:
            return self._instances

        def __init__(self, instances: List[Admin_Projects]):
            self._instances = instances

        def filter(self, **kwargs) -> Admin_Projects.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Admin_Projects.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, admin_obj: Admin, tab_name: str, project_name: str, project_type: str, bns_name: str, client_name: str, emp_name: str, status: str, due_date: str, task_name: str, percent: int, notes: str, frequency: str, month: str, day: str, service_name: str, alert: str):
        self.admin_obj = admin_obj
        self.tab_name = tab_name
        self.project_name = project_name
        self.project_type = project_type
        self.bns_name = bns_name
        self.client_name = client_name
        self.emp_name = emp_name
        self.status = status
        self.due_date = due_date
        self.task_name = task_name
        self.percent = percent
        self.notes = notes
        self.frequency = frequency
        self.month = month
        self.day = day
        self.service_name = service_name
        self.alert = alert
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Admin_Projects):
            is_equal = True
            if self.admin_obj != other.admin_obj:
                is_equal = False
            if self.tab_name != other.tab_name:
                is_equal = False
            if self.project_name != other.project_name:
                is_equal = False
            if self.project_type != other.project_type:
                is_equal = False
            if self.bns_name != other.bns_name:
                is_equal = False
            if self.client_name != other.client_name:
                is_equal = False
            if self.emp_name != other.emp_name:
                is_equal = False
            if self.status != other.status:
                is_equal = False
            if self.due_date != other.due_date:
                is_equal = False
            if self.task_name != other.task_name:
                is_equal = False
            if self.percent != other.percent:
                is_equal = False
            if self.notes != other.notes:
                is_equal = False
            if self.frequency != other.frequency:
                is_equal = False
            if self.month != other.month:
                is_equal = False
            if self.day != other.day:
                is_equal = False
            if self.service_name != other.service_name:
                is_equal = False
            if self.alert != other.alert:
                is_equal = False
            return is_equal
        return False

class contact_us():
    class objects():
        _all_instances: List[contact_us] = list()
        @classmethod
        def _add_instance(cls, obj: contact_us):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> contact_us.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[contact_us]:
            return self._instances

        def __init__(self, instances: List[contact_us]):
            self._instances = instances

        def filter(self, **kwargs) -> contact_us.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> contact_us.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, first_name: str, last_name: str, business_name: str, business_email_id: str, contact_num: str, firms_emp_size: str, firms_client_size: str):
        self.first_name = first_name
        self.last_name = last_name
        self.business_name = business_name
        self.business_email_id = business_email_id
        self.contact_num = contact_num
        self.firms_emp_size = firms_emp_size
        self.firms_client_size = firms_client_size
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, contact_us):
            is_equal = True
            if self.first_name != other.first_name:
                is_equal = False
            if self.last_name != other.last_name:
                is_equal = False
            if self.business_name != other.business_name:
                is_equal = False
            if self.business_email_id != other.business_email_id:
                is_equal = False
            if self.contact_num != other.contact_num:
                is_equal = False
            if self.firms_emp_size != other.firms_emp_size:
                is_equal = False
            if self.firms_client_size != other.firms_client_size:
                is_equal = False
            return is_equal
        return False

class Admin_Data_Count():
    class objects():
        _all_instances: List[Admin_Data_Count] = list()
        @classmethod
        def _add_instance(cls, obj: Admin_Data_Count):
            cls._all_instances.append(obj)

        @classmethod
        def all(cls) -> Admin_Data_Count.objects:
            return cls(cls._all_instances)

        @property
        def values(self) -> List[Admin_Data_Count]:
            return self._instances

        def __init__(self, instances: List[Admin_Data_Count]):
            self._instances = instances

        def filter(self, **kwargs) -> Admin_Data_Count.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) != field_value:
                            is_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

        def exclude(self, **kwargs) -> Admin_Data_Count.objects:
            new_instance = list()
            for instance_obj in self._instances:
                is_not_matching = True
                for field, field_value in kwargs.items():
                    if hasattr(instance_obj, field):
                        if getattr(instance_obj, field) == field_value:
                            is_not_matching = False
                            break
                    else:
                        raise Exception("Field {} does not exist".format(field))
                if is_not_matching:
                    new_instance.append(instance_obj)
            self._instances = new_instance
            return self

    def __init__(self, adm_email: str, adm_users: int, adm_emps: int, adm_bnss: int, adm_tasks: int, adm_files: int, adm_msgs: int, adm_todos: int, adm_invoices: int):
        self.adm_email = adm_email
        self.adm_users = adm_users
        self.adm_emps = adm_emps
        self.adm_bnss = adm_bnss
        self.adm_tasks = adm_tasks
        self.adm_files = adm_files
        self.adm_msgs = adm_msgs
        self.adm_todos = adm_todos
        self.adm_invoices = adm_invoices
        self.objects._add_instance(self)

    def __eq__(self, other):
        if isinstance(other, Admin_Data_Count):
            is_equal = True
            if self.adm_email != other.adm_email:
                is_equal = False
            if self.adm_users != other.adm_users:
                is_equal = False
            if self.adm_emps != other.adm_emps:
                is_equal = False
            if self.adm_bnss != other.adm_bnss:
                is_equal = False
            if self.adm_tasks != other.adm_tasks:
                is_equal = False
            if self.adm_files != other.adm_files:
                is_equal = False
            if self.adm_msgs != other.adm_msgs:
                is_equal = False
            if self.adm_todos != other.adm_todos:
                is_equal = False
            if self.adm_invoices != other.adm_invoices:
                is_equal = False
            return is_equal
        return False

